// Code generated by "enumer -sql=false -linecomment -type=PumpState,BlowerMode,LightsMode,PowerSaveMode,HeatPumpMode,LockMode,SleepTimerState -output=status_strings.go status.go"; DO NOT EDIT.

//
package spanet

import (
	"encoding/json"
	"fmt"
)

const (
	_PumpStateName_0 = "OffOn"
	_PumpStateName_1 = "Auto"
)

var (
	_PumpStateIndex_0 = [...]uint8{0, 3, 5}
	_PumpStateIndex_1 = [...]uint8{0, 4}
)

func (i PumpState) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _PumpStateName_0[_PumpStateIndex_0[i]:_PumpStateIndex_0[i+1]]
	case i == 4:
		return _PumpStateName_1
	default:
		return fmt.Sprintf("PumpState(%d)", i)
	}
}

var _PumpStateValues = []PumpState{0, 1, 4}

var _PumpStateNames = []string{"Off", "On", "Auto"}

var _PumpStateNameToValueMap = map[string]PumpState{
	_PumpStateName_0[0:3]: 0,
	_PumpStateName_0[3:5]: 1,
	_PumpStateName_1[0:4]: 4,
}

// PumpStateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PumpStateString(s string) (PumpState, error) {

	if val, ok := _PumpStateNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to PumpState values", s)
}

func ParsePumpState(s string) (PumpState, error) {
	return PumpStateString(s)
}

// PumpStateValues returns all values of the enum
func PumpStateValues() []PumpState {
	return _PumpStateValues
}

func PumpStateNames() []string {
	return _PumpStateNames
}

// IsAPumpState returns "true" if the value is listed in the enum definition. "false" otherwise
func (i PumpState) IsAPumpState() bool {
	for _, v := range _PumpStateValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for PumpState
func (i PumpState) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for PumpState
func (i *PumpState) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("PumpState should be a string, got %s", data)
	}

	var err error
	*i, err = PumpStateString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for PumpState
func (i PumpState) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for PumpState
func (i *PumpState) UnmarshalText(text []byte) error {
	var err error
	*i, err = PumpStateString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for PumpState
func (i PumpState) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for PumpState
func (i *PumpState) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = PumpStateString(s)
	return err
}

const _BlowerModeName = "VariableRampOff"

var _BlowerModeIndex = [...]uint8{0, 8, 12, 15}

func (i BlowerMode) String() string {
	if i >= BlowerMode(len(_BlowerModeIndex)-1) {
		return fmt.Sprintf("BlowerMode(%d)", i)
	}
	return _BlowerModeName[_BlowerModeIndex[i]:_BlowerModeIndex[i+1]]
}

var _BlowerModeValues = []BlowerMode{0, 1, 2}

var _BlowerModeNames = []string{"Variable", "Ramp", "Off"}

var _BlowerModeNameToValueMap = map[string]BlowerMode{
	_BlowerModeName[0:8]:   0,
	_BlowerModeName[8:12]:  1,
	_BlowerModeName[12:15]: 2,
}

// BlowerModeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func BlowerModeString(s string) (BlowerMode, error) {

	if val, ok := _BlowerModeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to BlowerMode values", s)
}

func ParseBlowerMode(s string) (BlowerMode, error) {
	return BlowerModeString(s)
}

// BlowerModeValues returns all values of the enum
func BlowerModeValues() []BlowerMode {
	return _BlowerModeValues
}

func BlowerModeNames() []string {
	return _BlowerModeNames
}

// IsABlowerMode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i BlowerMode) IsABlowerMode() bool {
	for _, v := range _BlowerModeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for BlowerMode
func (i BlowerMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for BlowerMode
func (i *BlowerMode) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("BlowerMode should be a string, got %s", data)
	}

	var err error
	*i, err = BlowerModeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for BlowerMode
func (i BlowerMode) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for BlowerMode
func (i *BlowerMode) UnmarshalText(text []byte) error {
	var err error
	*i, err = BlowerModeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for BlowerMode
func (i BlowerMode) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for BlowerMode
func (i *BlowerMode) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = BlowerModeString(s)
	return err
}

const _LightsModeName = "WhiteColourStepFadeParty"

var _LightsModeIndex = [...]uint8{0, 5, 11, 15, 19, 24}

func (i LightsMode) String() string {
	if i >= LightsMode(len(_LightsModeIndex)-1) {
		return fmt.Sprintf("LightsMode(%d)", i)
	}
	return _LightsModeName[_LightsModeIndex[i]:_LightsModeIndex[i+1]]
}

var _LightsModeValues = []LightsMode{0, 1, 2, 3, 4}

var _LightsModeNames = []string{"White", "Colour", "Step", "Fade", "Party"}

var _LightsModeNameToValueMap = map[string]LightsMode{
	_LightsModeName[0:5]:   0,
	_LightsModeName[5:11]:  1,
	_LightsModeName[11:15]: 2,
	_LightsModeName[15:19]: 3,
	_LightsModeName[19:24]: 4,
}

// LightsModeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func LightsModeString(s string) (LightsMode, error) {

	if val, ok := _LightsModeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to LightsMode values", s)
}

func ParseLightsMode(s string) (LightsMode, error) {
	return LightsModeString(s)
}

// LightsModeValues returns all values of the enum
func LightsModeValues() []LightsMode {
	return _LightsModeValues
}

func LightsModeNames() []string {
	return _LightsModeNames
}

// IsALightsMode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i LightsMode) IsALightsMode() bool {
	for _, v := range _LightsModeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for LightsMode
func (i LightsMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for LightsMode
func (i *LightsMode) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("LightsMode should be a string, got %s", data)
	}

	var err error
	*i, err = LightsModeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for LightsMode
func (i LightsMode) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for LightsMode
func (i *LightsMode) UnmarshalText(text []byte) error {
	var err error
	*i, err = LightsModeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for LightsMode
func (i LightsMode) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for LightsMode
func (i *LightsMode) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = LightsModeString(s)
	return err
}

const _PowerSaveModeName = "OffLowHigh"

var _PowerSaveModeIndex = [...]uint8{0, 3, 6, 10}

func (i PowerSaveMode) String() string {
	if i >= PowerSaveMode(len(_PowerSaveModeIndex)-1) {
		return fmt.Sprintf("PowerSaveMode(%d)", i)
	}
	return _PowerSaveModeName[_PowerSaveModeIndex[i]:_PowerSaveModeIndex[i+1]]
}

var _PowerSaveModeValues = []PowerSaveMode{0, 1, 2}

var _PowerSaveModeNames = []string{"Off", "Low", "High"}

var _PowerSaveModeNameToValueMap = map[string]PowerSaveMode{
	_PowerSaveModeName[0:3]:  0,
	_PowerSaveModeName[3:6]:  1,
	_PowerSaveModeName[6:10]: 2,
}

// PowerSaveModeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PowerSaveModeString(s string) (PowerSaveMode, error) {

	if val, ok := _PowerSaveModeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to PowerSaveMode values", s)
}

func ParsePowerSaveMode(s string) (PowerSaveMode, error) {
	return PowerSaveModeString(s)
}

// PowerSaveModeValues returns all values of the enum
func PowerSaveModeValues() []PowerSaveMode {
	return _PowerSaveModeValues
}

func PowerSaveModeNames() []string {
	return _PowerSaveModeNames
}

// IsAPowerSaveMode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i PowerSaveMode) IsAPowerSaveMode() bool {
	for _, v := range _PowerSaveModeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for PowerSaveMode
func (i PowerSaveMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for PowerSaveMode
func (i *PowerSaveMode) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("PowerSaveMode should be a string, got %s", data)
	}

	var err error
	*i, err = PowerSaveModeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for PowerSaveMode
func (i PowerSaveMode) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for PowerSaveMode
func (i *PowerSaveMode) UnmarshalText(text []byte) error {
	var err error
	*i, err = PowerSaveModeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for PowerSaveMode
func (i PowerSaveMode) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for PowerSaveMode
func (i *PowerSaveMode) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = PowerSaveModeString(s)
	return err
}

const _HeatPumpModeName = "AutoHeatCoolDisable"

var _HeatPumpModeIndex = [...]uint8{0, 4, 8, 12, 19}

func (i HeatPumpMode) String() string {
	if i >= HeatPumpMode(len(_HeatPumpModeIndex)-1) {
		return fmt.Sprintf("HeatPumpMode(%d)", i)
	}
	return _HeatPumpModeName[_HeatPumpModeIndex[i]:_HeatPumpModeIndex[i+1]]
}

var _HeatPumpModeValues = []HeatPumpMode{0, 1, 2, 3}

var _HeatPumpModeNames = []string{"Auto", "Heat", "Cool", "Disable"}

var _HeatPumpModeNameToValueMap = map[string]HeatPumpMode{
	_HeatPumpModeName[0:4]:   0,
	_HeatPumpModeName[4:8]:   1,
	_HeatPumpModeName[8:12]:  2,
	_HeatPumpModeName[12:19]: 3,
}

// HeatPumpModeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func HeatPumpModeString(s string) (HeatPumpMode, error) {

	if val, ok := _HeatPumpModeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to HeatPumpMode values", s)
}

func ParseHeatPumpMode(s string) (HeatPumpMode, error) {
	return HeatPumpModeString(s)
}

// HeatPumpModeValues returns all values of the enum
func HeatPumpModeValues() []HeatPumpMode {
	return _HeatPumpModeValues
}

func HeatPumpModeNames() []string {
	return _HeatPumpModeNames
}

// IsAHeatPumpMode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i HeatPumpMode) IsAHeatPumpMode() bool {
	for _, v := range _HeatPumpModeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for HeatPumpMode
func (i HeatPumpMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for HeatPumpMode
func (i *HeatPumpMode) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("HeatPumpMode should be a string, got %s", data)
	}

	var err error
	*i, err = HeatPumpModeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for HeatPumpMode
func (i HeatPumpMode) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for HeatPumpMode
func (i *HeatPumpMode) UnmarshalText(text []byte) error {
	var err error
	*i, err = HeatPumpModeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for HeatPumpMode
func (i HeatPumpMode) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for HeatPumpMode
func (i *HeatPumpMode) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = HeatPumpModeString(s)
	return err
}

const _LockModeName = "OffPartialFull"

var _LockModeIndex = [...]uint8{0, 3, 10, 14}

func (i LockMode) String() string {
	if i >= LockMode(len(_LockModeIndex)-1) {
		return fmt.Sprintf("LockMode(%d)", i)
	}
	return _LockModeName[_LockModeIndex[i]:_LockModeIndex[i+1]]
}

var _LockModeValues = []LockMode{0, 1, 2}

var _LockModeNames = []string{"Off", "Partial", "Full"}

var _LockModeNameToValueMap = map[string]LockMode{
	_LockModeName[0:3]:   0,
	_LockModeName[3:10]:  1,
	_LockModeName[10:14]: 2,
}

// LockModeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func LockModeString(s string) (LockMode, error) {

	if val, ok := _LockModeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to LockMode values", s)
}

func ParseLockMode(s string) (LockMode, error) {
	return LockModeString(s)
}

// LockModeValues returns all values of the enum
func LockModeValues() []LockMode {
	return _LockModeValues
}

func LockModeNames() []string {
	return _LockModeNames
}

// IsALockMode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i LockMode) IsALockMode() bool {
	for _, v := range _LockModeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for LockMode
func (i LockMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for LockMode
func (i *LockMode) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("LockMode should be a string, got %s", data)
	}

	var err error
	*i, err = LockModeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for LockMode
func (i LockMode) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for LockMode
func (i *LockMode) UnmarshalText(text []byte) error {
	var err error
	*i, err = LockModeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for LockMode
func (i LockMode) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for LockMode
func (i *LockMode) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = LockModeString(s)
	return err
}

const (
	_SleepTimerStateName_0 = "Weekdays"
	_SleepTimerStateName_1 = "Weekends"
	_SleepTimerStateName_2 = "EverydayOff"
)

var (
	_SleepTimerStateIndex_0 = [...]uint8{0, 8}
	_SleepTimerStateIndex_1 = [...]uint8{0, 8}
	_SleepTimerStateIndex_2 = [...]uint8{0, 8, 11}
)

func (i SleepTimerState) String() string {
	switch {
	case i == 31:
		return _SleepTimerStateName_0
	case i == 96:
		return _SleepTimerStateName_1
	case 127 <= i && i <= 128:
		i -= 127
		return _SleepTimerStateName_2[_SleepTimerStateIndex_2[i]:_SleepTimerStateIndex_2[i+1]]
	default:
		return fmt.Sprintf("SleepTimerState(%d)", i)
	}
}

var _SleepTimerStateValues = []SleepTimerState{31, 96, 127, 128}

var _SleepTimerStateNames = []string{"Weekdays", "Weekends", "Everyday", "Off"}

var _SleepTimerStateNameToValueMap = map[string]SleepTimerState{
	_SleepTimerStateName_0[0:8]:  31,
	_SleepTimerStateName_1[0:8]:  96,
	_SleepTimerStateName_2[0:8]:  127,
	_SleepTimerStateName_2[8:11]: 128,
}

// SleepTimerStateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SleepTimerStateString(s string) (SleepTimerState, error) {

	if val, ok := _SleepTimerStateNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SleepTimerState values", s)
}

func ParseSleepTimerState(s string) (SleepTimerState, error) {
	return SleepTimerStateString(s)
}

// SleepTimerStateValues returns all values of the enum
func SleepTimerStateValues() []SleepTimerState {
	return _SleepTimerStateValues
}

func SleepTimerStateNames() []string {
	return _SleepTimerStateNames
}

// IsASleepTimerState returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SleepTimerState) IsASleepTimerState() bool {
	for _, v := range _SleepTimerStateValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SleepTimerState
func (i SleepTimerState) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SleepTimerState
func (i *SleepTimerState) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SleepTimerState should be a string, got %s", data)
	}

	var err error
	*i, err = SleepTimerStateString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for SleepTimerState
func (i SleepTimerState) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for SleepTimerState
func (i *SleepTimerState) UnmarshalText(text []byte) error {
	var err error
	*i, err = SleepTimerStateString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for SleepTimerState
func (i SleepTimerState) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for SleepTimerState
func (i *SleepTimerState) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = SleepTimerStateString(s)
	return err
}
